#compdef tmux
emulate -L zsh
setopt extendedglob
_tmux () {
    local opts cmds short_cmds noopts_words windows tmpstate sessions layouts
    windows=(${(q)${${${${(M)${(f)"$(tmux list-windows 2>/dev/null)"}:#[[:space:]]#[[:digit:]]*}// \[*}/  /}/\: /\:}})
    sessions=(${(q)${${${(f)"$(tmux list-sessions 2>/dev/null)"}/ \[*/}/\: /\:}})
    keys=(${(q)${${${(f)"$(tmux list-key 2>/dev/null)"}/[[:space:]]#}/\:[[:space:]]/\:}})
    layouts=(
	'active-only:Only\ the\ active\ pane\ is\ show'
	'even-horizontal:Panes\ are\ spread\ out\ evenly\ from\ left\ to\ right\ across\ the\ window'
	'even-vertical:Panes\ are\ spread\ evenly\ from\ top\ to\ bottom'
	'main-horizontal:A\ large\ (main)\ pane\ is\ shown\ at\ the\ top\ of\ the\ window'
	'main-vertical::A\ large\ (main)\ pane\ is\ shown\ at\ the\  left\ of\ the\ window'
	'manual:Manual\ layout\ splits\ windows\ vertically'
    )
    opts=(
	'-2[assume the terminal supports 256 colours]'
	'-8[assume the terminal supports 88 colours]'
	'-d[assume the terminal supports default colours]'
	'-q[Prevent the server sending various informational messages]'
	'-U[Unlock the server]'
	'-u[explicitly informs tmux that UTF-8 is supported]'
	'-v[verbose logging]'
	'-f[alternative configuration file]:alternative configuration file:_files'
	'-L[Specify a different socket name]:Socket Name:'
	'-S[Specify a full alternative path to the server socket]:patch to the server socket:_files'
    )
    cmds=(
	'attach-session[Create a new client in the current terminal and attach it to a session]'
	'bind-key[Bind key key to command]'
	'break-pane[Break the current pane off from its containing window]'
	'choose-session[Put a window into session choice mode]'
	'choose-window[Put a window into window choice mode]'
	'clear-history[Remove and free the history for the specified pane]'
	'clock-mode[Display a large clock]'
	'command-prompt[Open the command prompt in a client]'
	'confirm-before[Ask for confirmation before executing command]'
	'copy-buffer[Copy a session paste buffer to another session]'
	'copy-mode[Enter copy mode]'
	'delete-buffer[Delete the buffer at buffer-index]'
	'detach-client[Detach the current or given client if bound to a key]'
	'down-pane[Move down a pane]'
	'find-window[Search for the fnmatch(3) pattern match-string in window names titles, and visible content]'
	'has-session[Report an error and exit with 1 if the specified session does not exists]'
	'kill-pane[Destroy the given pane]'
	'kill-server[Kill the tmux server and clients and destroy all sessions]'
	'kill-session[Destroy the given session]'
	'kill-window[Kill the current or given window]'
	'last-window[Select the last (previously selected) window]'
	'link-window[Link the window at src-window to the specified dst-window]'
	'list-buffers[List the buffers in the given session]'
	'list-clients[List all clients attached to the server]'
	'list-commands[List the syntax of all commands supported by tmux]'
	'list-keys[List all key bindings]'
	'list-sessions[List all sessions managed by the server]'
	'list-windows[List windows in the current session or in target-session]'
	'load-buffer[Load the contents of the specified paste buffer from path]'
	'lock-server[Lock the server until a password is entered]'
	'move-window[the window at src-window is moved to dst-window]'
	'new-session[Create a new session with name session-name]'
	'new-window[Create a new window]'
	'next-layout[Move a window to the next layout and rearrange the panes to fit]'
	'next-window[Move to the next window in the session]'
	'paste-buffer[Insert the contents of a paste buffer into the current window]'
	'previous-window[Move to the previous window in the session]'
	'refresh-client[Refresh the current or given client]'
	'rename-session[Rename the session to new-name]'
	'rename-window[Rename the current or given window]'
	'resize-pane[Resize a pane]'
	'respawn-window[Reactive a window in which the command has exited]'
	'rotate-window[Rotate the positions of the panes within a window]'
	'save-buffer[Save the contents of the specified paste buffer to path]'
	'scroll-mode[Enter scroll mode]'
	'select-layout[Choose a specific layout for a window]'
	'select-pane[Make pane pane-index the active pane in window target-window]'
	'select-prompt[Open a prompt inside target-client]'
	'select-window[Select the window at target-window]'
	'send-keys[Send a key or keys to a window]'
	'send-prefix[Send the prefix key to a window as if it was pressed]'
	'server-info[Show server information and terminal details]'
	'set-buffer[Set the contents of the specified buffer to data]'
	'set-option[Set an option]'
	'set-password[Set the server password]'
	'set-window-option[Set a window-specific option]'
	'show-buffer[Display the contents of the specified buffer]'
	'show-options[Show the currently set options]'
	'show-window-options[List the current options for the given window]'
	'source-file[Execute commands from path]'
	'split-window[Creates a new window by splitting it vertically]'
	'start-server[Start the tmux server]'
	'suspend-client[Suspend a client by sending SIGTSTP]'
	'swap-pane[Swap two panes within a window]'
	'swap-window[Swap two windows]'
	'switch-client[Switch the current session for client target-client to target-session]'
	'unbind-key[Unbind the key bound to key]'
	'unlink-window[Unlink target-window]'
	'up-pane[Move up a pane]'
    )
    short_cmds=(${cmds/\[*})
    noopts_words=(${${words[2,-1]}:#-*})
    _arguments -s \
    "$opts[@]" \
    "*::tmux commands:->cmd" && ret=0
    while [[ -n "$state" ]]; do
	tmpstate="$state"
	state=
	case "$tmpstate" in
	    cmd)
	    if (( $short_cmds[(I)$noopts_words[1]] )); then
		case "$noopts_words[1]" in 
		    (attach-session)
		    _arguments \
		    '-d[Detached any other clients attached]' \
		    "-t[Attach the target session]:target session:((\$sessions[@]))" && return 0
		    ;;
		    (bind-key)
		    _message "TODO: Completion not done yet"
		    ;;
		    (break-pane)
		    _arguments \
		    '-d[new window does not become the current window]' \
		    '-p[index of the pane]:pane index:' \
		    "-t[Target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    (choose-(session|window)|clock-mode|(kill|select|target)-window|next-layout|send-prefix)
		    _arguments \
		    "-t[Target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    (clear-history|(down|up|select|kill)-pane)
		    _arguments \
		    "-p[Pane Index]:pane index:" \
		    "-t[Target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    (command-prompt)
		    _arguments -s \
		    '-t[Attach the target session]:target session:(${${(f)"$(tmux list-clients 2>/dev/null)"}/\:*})' \
		    ":Template:"
		    ;;
		    (confirm-before)
		    _arguments \
		    '-t[Attach the target session]:target session:(${${(f)"$(tmux list-clients 2>/dev/null)"}/\:*})' \
		    ':Command:(${commands:t})' && return 0
		    ;;
		    (copy-buffer)
		    _arguments \
		    "-a[Source Index]:source index:" \
		    "-b[Destination Index]:destination index:" \
		    "-s[Source session]:source session:((\$sessions[@]))" \
		    "-d[Destination session]:destination session:((\$sessions[@]))" && return 0
		    ;;
		    ((copy|scroll)-mode)
		    _arguments \
		    "-u[scrolls one page up]" \
		    "-t[Target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    ((show|delete)-buffer)
		    _arguments \
		    "-b[Buffer Index]:Buffer index:" \
		    "-t[target session]:Target session:((\$sessions[@]))" && return 0
		    ;;
		    ((detach|refresh)-client|select-prompt)
		    _arguments \
		    "-t[Target Client]:Target client:(${${(f)"$(tmux list-clients 2>/dev/null)"}/\:*})" && return 0
		    ;;
		    (find-window)
		    _arguments \
		    "-t[Target window]:Target window:((\$windows[@]))" \
		   ":match string:" && return 0
		    ;;
		    ((has|kill)-session|list-buffers|l(i|a)st-window)
		    "-t[Target session]:Target session:((\$sessions[@]))" && return 0
		    ;;
		    ((kill|start|lock)-server|list-(keys|sessions)|server-info)
		    return 0
		    ;;
		    (link-window)
		    _arguments \
		    "-d[Do not select the newly linked window]" \
		    "-k[kill the destination window if exists]" \
		    "-s[Source window]:Source window:((\$windows[@]))" \
		    "-t[Destination window]:Destination window:((\$windows[@]))" && return 0
		    ;;
		    (load-buffer)
		    _arguments \
		    "-b[Buffer Index]:Buffer index:" \
		    "-t[target session]:Target session:((\$sessions[@]))" \
		    ":buffer path:_files" && return 0
		    ;;
		    ((move|swap)-window)
		    _arguments \
		    "-d[Do not select the newly moved window]" \
		    "-s[Source window]:Source window:((\$windows[@]))" \
		    "-t[Destination window]:Destination window:((\$windows[@]))" && return 0
		    ;;
		    (new-session)
		    _arguments \
		    '-d[Do not attach to the current terminal]' \
		    '-n[Name of the new window]:name:' \
		    '-s[Name of the new session]:name:' \
		    ':Command:(${commands:t})' && return 0
		    ;;
		    (new-window)
		    _arguments \
		    '-d[Do not make the new window the current window]' \
		    '-n[Name of the new window]:name:' \
		    '-t[Window to be created]:target window:' \
		    ':Command:(${commands:t})' && return 0
		    ;;
		    ((previous|next)-window)
		    _arguments \
		    '-a[move to the next window with a bell, activity or content alert]' \
		    "-t[Target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    (paste-buffer)
		    _arguments \
		    '-b' \
		    "-b[Buffer Index]:Buffer index:" \
		    "-t[target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    (rename-session)
		    _arguments \
		    "-t[target session]:Target session:((\$sessions[@]))" \
		    ':new session name:' && return 0
		    ;;
		    (rename-window)
		    _arguments \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    ':new window name:' && return 0
		    ;;
		    (resize-pane)
		    _arguments \
		    "-D[resize downward]" \
		    "-U[resize upward]" \
		    '-p[index of the pane]::pane index:' \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    ':adjustment in line:' && return 0
		    ;;
		    (respawn-window)
		    _arguments \
		    "-k[kill existing command in the window]" \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    ':Command:(${commands:t})' && return 0
		    ;;
		    (rotate-window)
		    _arguments \
		    "-D[rotate downward]" \
		    "-U[rotate upward]" \
		    "-t[target window]:Target window:((\$windows[@]))" && return 0
		    ;;
		    (save-buffer)
		    _arguments \
		    "-a[Append to the file]" \
		    "-b[Buffer Index]:Buffer index:" \
		    "-t[target session]:Target session:((\$sessions[@]))" \
		    ":path:_files" && return 0
		    ;;
		    (select-layout)
		    _arguments \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    ":layout:((\layouts[@]))" && return 0
		    ;;		    
		    (send-keys)
		    _arguments \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    ":keys:" && return 0
		    ;;
		    (set-buffer)
		    _arguments \
		    "-b[Buffer Index]:Buffer index:" \
		    "-t[target session]:Target session:((\$sessions[@]))" \
		    ":data:" && return 0
		    ;;
		    (set-option|set-window-option|show-options|show-window-options)
		    _message "Command not implemented in completion yet"
		    ;;
		    (set-password)
		    _arguments \
		    "-c[specify a preencrypted password]" \
		    ":password:" && return 0
		    ;;
		    (source-file)
		    _arguments \
		    ":file to source:_files" && return 0
		    ;;
		    (split-window)
		    _arguments \
		    '-d' \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    "(-p)-l[lines]:lines" \
		    "(-l)-p[percentage]:percent:" \
		    ':Command:(${commands:t})' && return 0
		    ;;
		    (suspend-client)
		     _arguments \
		     "-c[Target Client]:Target client:(${${(f)"$(tmux list-clients 2>/dev/null)"}/\:*})" && return 0
		    ;;
		    (swap-pane)
		    _arguments \
		    "-d" \
		    "-D[swap with the pane below]" \
		    "-U[swap with the pane above]" \
		    '-p[index of the source pane]:pane index:' \
		    "-t[target window]:Target window:((\$windows[@]))" \
		    "-q[index of the destination pane]:pane index:" && return 0
		    ;;
		    (switch-client)
		    _arguments \
		    "-c[Target Client]:Target client:(${${(f)"$(tmux list-clients 2>/dev/null)"}/\:*})" \
		    "-t[target session]:Target session:((\$sessions[@]))" && return 0
		    ;;
		    (unbind-key)
		    _arguments \
		    ":key:((\$keys[@]))" && return 0
		    ;;
		    *)
		    _message "Command not implemented in completion yet"
		    ;;
		esac
	    else
		state=subcmd
	    fi
	    ;;
	    subcmd)
	    _values "tmux command" $cmds && return 0
	    ;;
	esac
    done
}
_tmux "$@"
